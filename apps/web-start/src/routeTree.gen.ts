/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppProfileRouteImport } from './routes/_app/profile'
import { Route as AppGradesRouteImport } from './routes/_app/grades'
import { Route as AppEnrollmentsRouteImport } from './routes/_app/enrollments'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { Route as AppAssignmentsRouteImport } from './routes/_app/assignments'
import { Route as AppCoursesCourseIdRouteImport } from './routes/_app/courses/$courseId'
import { Route as AppAdminUsersRouteImport } from './routes/_app/admin/users'
import { Route as AppAdminCoursesRouteImport } from './routes/_app/admin/courses'

const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppProfileRoute = AppProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppGradesRoute = AppGradesRouteImport.update({
  id: '/grades',
  path: '/grades',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppEnrollmentsRoute = AppEnrollmentsRouteImport.update({
  id: '/enrollments',
  path: '/enrollments',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAssignmentsRoute = AppAssignmentsRouteImport.update({
  id: '/assignments',
  path: '/assignments',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppCoursesCourseIdRoute = AppCoursesCourseIdRouteImport.update({
  id: '/courses/$courseId',
  path: '/courses/$courseId',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAdminUsersRoute = AppAdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAdminCoursesRoute = AppAdminCoursesRouteImport.update({
  id: '/admin/courses',
  path: '/admin/courses',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/assignments': typeof AppAssignmentsRoute
  '/dashboard': typeof AppDashboardRoute
  '/enrollments': typeof AppEnrollmentsRoute
  '/grades': typeof AppGradesRoute
  '/profile': typeof AppProfileRoute
  '/admin/courses': typeof AppAdminCoursesRoute
  '/admin/users': typeof AppAdminUsersRoute
  '/courses/$courseId': typeof AppCoursesCourseIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/assignments': typeof AppAssignmentsRoute
  '/dashboard': typeof AppDashboardRoute
  '/enrollments': typeof AppEnrollmentsRoute
  '/grades': typeof AppGradesRoute
  '/profile': typeof AppProfileRoute
  '/admin/courses': typeof AppAdminCoursesRoute
  '/admin/users': typeof AppAdminUsersRoute
  '/courses/$courseId': typeof AppCoursesCourseIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/_app/assignments': typeof AppAssignmentsRoute
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/enrollments': typeof AppEnrollmentsRoute
  '/_app/grades': typeof AppGradesRoute
  '/_app/profile': typeof AppProfileRoute
  '/_app/admin/courses': typeof AppAdminCoursesRoute
  '/_app/admin/users': typeof AppAdminUsersRoute
  '/_app/courses/$courseId': typeof AppCoursesCourseIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/assignments'
    | '/dashboard'
    | '/enrollments'
    | '/grades'
    | '/profile'
    | '/admin/courses'
    | '/admin/users'
    | '/courses/$courseId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/assignments'
    | '/dashboard'
    | '/enrollments'
    | '/grades'
    | '/profile'
    | '/admin/courses'
    | '/admin/users'
    | '/courses/$courseId'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/home'
    | '/_app/assignments'
    | '/_app/dashboard'
    | '/_app/enrollments'
    | '/_app/grades'
    | '/_app/profile'
    | '/_app/admin/courses'
    | '/_app/admin/users'
    | '/_app/courses/$courseId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  HomeRoute: typeof HomeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/profile': {
      id: '/_app/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/grades': {
      id: '/_app/grades'
      path: '/grades'
      fullPath: '/grades'
      preLoaderRoute: typeof AppGradesRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/enrollments': {
      id: '/_app/enrollments'
      path: '/enrollments'
      fullPath: '/enrollments'
      preLoaderRoute: typeof AppEnrollmentsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/assignments': {
      id: '/_app/assignments'
      path: '/assignments'
      fullPath: '/assignments'
      preLoaderRoute: typeof AppAssignmentsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/courses/$courseId': {
      id: '/_app/courses/$courseId'
      path: '/courses/$courseId'
      fullPath: '/courses/$courseId'
      preLoaderRoute: typeof AppCoursesCourseIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/admin/users': {
      id: '/_app/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AppAdminUsersRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/admin/courses': {
      id: '/_app/admin/courses'
      path: '/admin/courses'
      fullPath: '/admin/courses'
      preLoaderRoute: typeof AppAdminCoursesRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppAssignmentsRoute: typeof AppAssignmentsRoute
  AppDashboardRoute: typeof AppDashboardRoute
  AppEnrollmentsRoute: typeof AppEnrollmentsRoute
  AppGradesRoute: typeof AppGradesRoute
  AppProfileRoute: typeof AppProfileRoute
  AppAdminCoursesRoute: typeof AppAdminCoursesRoute
  AppAdminUsersRoute: typeof AppAdminUsersRoute
  AppCoursesCourseIdRoute: typeof AppCoursesCourseIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppAssignmentsRoute: AppAssignmentsRoute,
  AppDashboardRoute: AppDashboardRoute,
  AppEnrollmentsRoute: AppEnrollmentsRoute,
  AppGradesRoute: AppGradesRoute,
  AppProfileRoute: AppProfileRoute,
  AppAdminCoursesRoute: AppAdminCoursesRoute,
  AppAdminUsersRoute: AppAdminUsersRoute,
  AppCoursesCourseIdRoute: AppCoursesCourseIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  HomeRoute: HomeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
