/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as HomeRouteImport } from './routes/home'
import { Route as GradesRouteImport } from './routes/grades'
import { Route as EnrollmentsRouteImport } from './routes/enrollments'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AssignmentsRouteImport } from './routes/assignments'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CoursesCourseIdRouteImport } from './routes/courses/$courseId'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const GradesRoute = GradesRouteImport.update({
  id: '/grades',
  path: '/grades',
  getParentRoute: () => rootRouteImport,
} as any)
const EnrollmentsRoute = EnrollmentsRouteImport.update({
  id: '/enrollments',
  path: '/enrollments',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AssignmentsRoute = AssignmentsRouteImport.update({
  id: '/assignments',
  path: '/assignments',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesCourseIdRoute = CoursesCourseIdRouteImport.update({
  id: '/courses/$courseId',
  path: '/courses/$courseId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/assignments': typeof AssignmentsRoute
  '/dashboard': typeof DashboardRoute
  '/enrollments': typeof EnrollmentsRoute
  '/grades': typeof GradesRoute
  '/home': typeof HomeRoute
  '/profile': typeof ProfileRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/assignments': typeof AssignmentsRoute
  '/dashboard': typeof DashboardRoute
  '/enrollments': typeof EnrollmentsRoute
  '/grades': typeof GradesRoute
  '/home': typeof HomeRoute
  '/profile': typeof ProfileRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/assignments': typeof AssignmentsRoute
  '/dashboard': typeof DashboardRoute
  '/enrollments': typeof EnrollmentsRoute
  '/grades': typeof GradesRoute
  '/home': typeof HomeRoute
  '/profile': typeof ProfileRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/assignments'
    | '/dashboard'
    | '/enrollments'
    | '/grades'
    | '/home'
    | '/profile'
    | '/courses/$courseId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/assignments'
    | '/dashboard'
    | '/enrollments'
    | '/grades'
    | '/home'
    | '/profile'
    | '/courses/$courseId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/assignments'
    | '/dashboard'
    | '/enrollments'
    | '/grades'
    | '/home'
    | '/profile'
    | '/courses/$courseId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  AssignmentsRoute: typeof AssignmentsRoute
  DashboardRoute: typeof DashboardRoute
  EnrollmentsRoute: typeof EnrollmentsRoute
  GradesRoute: typeof GradesRoute
  HomeRoute: typeof HomeRoute
  ProfileRoute: typeof ProfileRoute
  CoursesCourseIdRoute: typeof CoursesCourseIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grades': {
      id: '/grades'
      path: '/grades'
      fullPath: '/grades'
      preLoaderRoute: typeof GradesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/enrollments': {
      id: '/enrollments'
      path: '/enrollments'
      fullPath: '/enrollments'
      preLoaderRoute: typeof EnrollmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assignments': {
      id: '/assignments'
      path: '/assignments'
      fullPath: '/assignments'
      preLoaderRoute: typeof AssignmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/$courseId': {
      id: '/courses/$courseId'
      path: '/courses/$courseId'
      fullPath: '/courses/$courseId'
      preLoaderRoute: typeof CoursesCourseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  AssignmentsRoute: AssignmentsRoute,
  DashboardRoute: DashboardRoute,
  EnrollmentsRoute: EnrollmentsRoute,
  GradesRoute: GradesRoute,
  HomeRoute: HomeRoute,
  ProfileRoute: ProfileRoute,
  CoursesCourseIdRoute: CoursesCourseIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
