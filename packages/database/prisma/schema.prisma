generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String
  role            Role             @default(STUDENT)
  announcements   Announcement[]
  enrollments     Enrollment[]
  grades          Grade[]          @relation("Grader")
  submissions     Submission[]
  authentications Authentication[]
}

model Course {
  id            String         @id @default(cuid())
  title         String
  description   String
  announcements Announcement[]
  assignments   Assignment[]
  enrollments   Enrollment[]
  modules       Module[]
}

model Module {
  id       String @id @default(cuid())
  courseId String
  title    String
  content  String
  course   Course @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id       String @id @default(cuid())
  courseId String
  userId   String
  term     String
  course   Course @relation(fields: [courseId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

model Assignment {
  id          String       @id @default(cuid())
  courseId    String
  title       String
  description String
  dueDate     DateTime
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]
}

model Submission {
  id             String     @id @default(cuid())
  assignmentId   String
  studentId      String
  submissionDate DateTime
  content        String
  grade          Grade?     @relation("SubmissionGrade")
  assignment     Assignment @relation(fields: [assignmentId], references: [id])
  student        User       @relation(fields: [studentId], references: [id])
}

model Grade {
  id           String     @id @default(cuid())
  submissionId String     @unique
  graderId     String
  gradeValue   Float
  feedback     String
  gradedDate   DateTime
  grader       User       @relation("Grader", fields: [graderId], references: [id])
  submission   Submission @relation("SubmissionGrade", fields: [submissionId], references: [id])
}

model Announcement {
  id         String   @id @default(cuid())
  courseId   String
  authorId   String
  title      String
  content    String
  postedDate DateTime
  author     User     @relation(fields: [authorId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])
}

model Authentication {
  id         String @id @default(uuid())
  userId     String
  provider   String
  providerId String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([provider, providerId])
}
